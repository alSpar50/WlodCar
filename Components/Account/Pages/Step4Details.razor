@page "/reservation/step4"
@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@using DbReservation = WlodCar.Data.Entities.Reservation
@using WlodCar.Data.Entities
@using WlodCar.Services
@inject ReservationState               State
@inject IReservationService            ReservationService
@inject UserManager<ApplicationUser>   UserManager
@inject AuthenticationStateProvider    Auth

<h5 class="mb-3">Krok 4 – wprowadź dane</h5>

@if (error is not null)
{
    <div class="alert alert-danger">@error</div>
}

<div class="row g-4">
    <!-- ◄◄ FORMULARZ KIEROWCY -->
    <div class="col-lg-8">
        <EditForm Model="M" OnValidSubmit="Confirm" FormName="step4">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="row g-3">
                <div class="col-md-6">
                    <label>Imię</label>
                    <InputText class="form-control" @bind-Value="M.First" />
                </div>
                <div class="col-md-6">
                    <label>Nazwisko</label>
                    <InputText class="form-control" @bind-Value="M.Last" />
                </div>
                <div class="col-md-6">
                    <label>Telefon</label>
                    <InputText class="form-control" @bind-Value="M.Phone" />
                </div>
                <div class="col-md-6">
                    <label>Email</label>
                    <InputText class="form-control" @bind-Value="M.Email" />
                </div>
                <div class="col-md-6">
                    <label>Nr prawa jazdy</label>
                    <InputText class="form-control" @bind-Value="M.Licence" />
                </div>
            </div>

            @* ─────────────────────────────  SUWAK PUNKTÓW  ───────────────────────────── *@
            @if (pointsAvailable >= 10)
            {
                <div class="mt-4">
                    <label class="form-label small">
                        Wykorzystaj punkty lojalnościowe<br />
                        <span class="text-muted">(10 pkt = 1 % rabatu)</span>
                    </label>

                    <input type="range"
                           class="form-range"
                           min="0"
                           max="@pointsAvailable"
                           step="10"
                           @bind="pointsToUse" />

                    <div class="small">
                        Używasz <b>@pointsToUse</b> pkt
                        (rabat <b>@DiscountPercent</b>%,
                        oszczędzasz <b>@DiscountAmount.ToString("0.00")</b> PLN)
                    </div>
                </div>
            }

            <button class="btn btn-success mt-4 w-100">Rezerwuj</button>
        </EditForm>

        @if (saved)
        {
            <div class="alert alert-success mt-3">
                Rezerwacja przyjęta – dziękujemy!
            </div>
        }
    </div>

    <!-- ◄◄ PODSUMOWANIE -->
    <div class="col-lg-4">
        <h6>Podsumowanie</h6>
        <ul class="list-unstyled">
            <li><b>Termin:</b> @State.PickupDate:dd.MM → @State.ReturnDate:dd.MM</li>
            <li><b>Samochód:</b> @State.SelectedCar?.Name</li>
            @foreach (var ex in State.Extras)
            {
                <li>+ @ex.Name (@ex.Price PLN)</li>
            }
        </ul>
        <hr />
        <p>
            <b>Cena przed rabatem:</b><br />
            @Total.ToString("0.00") PLN
        </p>
        <p>
            <b>Cena po rabacie:</b><br />
            @FinalTotal.ToString("0.00") PLN
        </p>
    </div>
</div>

<div class="mt-4">
    <button class="btn btn-outline-secondary" @onclick="OnPrev">Wstecz</button>
</div>

@code {
    [Parameter] public EventCallback OnPrev { get; set; }

    /* -------- formularz -------- */
    private Model M = new();

    /* -------- punkty lojalnościowe -------- */
    private int pointsAvailable;
    private int pointsToUse;

    /* -------- status -------- */
    private bool saved;
    private string? error;

    /* -------- obliczenia -------- */
    private int Days   => Math.Max(1, (State.ReturnDate - State.PickupDate)!.Value.Days);
    private decimal BasePerDay => State.SelectedCar!.PricePerDay + State.Extras.Sum(e => e.Price);
    private decimal Total      => BasePerDay * Days;

    private decimal DiscountPercent => pointsToUse / 10m;              // 10 pkt = 1 %
    private decimal DiscountAmount  => Total * DiscountPercent / 100;  // kwota rabatu
    private decimal FinalTotal      => Total - DiscountAmount;         // cena po rabacie

    /* -------- wejście komponentu -------- */
    protected override async Task OnInitializedAsync()
    {
        var auth  = await Auth.GetAuthenticationStateAsync();
        var user  = await UserManager.GetUserAsync(auth.User);
        pointsAvailable = user?.LoyaltyPoints ?? 0;
    }

    /* -------- zapis -------- */
    private async Task Confirm()
    {
        error = null;
        saved = false;

        try
        {
            var auth   = await Auth.GetAuthenticationStateAsync();
            var claim  = auth.User.FindFirstValue(ClaimTypes.NameIdentifier);
            if (claim is null)
            {
                error = "Brak identyfikatora użytkownika.";
                return;
            }

            var userId = Guid.Parse(claim);

            var reservation = new DbReservation
            {
                UserId     = userId,
                CarId      = State.SelectedCar!.Id,
                DateFrom   = State.PickupDate!.Value,
                DateTo     = State.ReturnDate!.Value,
                TotalPrice = FinalTotal
            };

            await ReservationService.CreateAsync(reservation, pointsToUse);

            saved = true;   // ►► sukces
        }
        catch (Exception ex)
        {
            error = "Błąd: " + ex.GetBaseException().Message;
        }
    }

    class Model
    {
        [Required] public string? First   { get; set; }
        [Required] public string? Last    { get; set; }
        [Required] public string? Phone   { get; set; }
        [Required, EmailAddress] public string? Email   { get; set; }
        [Required] public string? Licence { get; set; }
    }
}