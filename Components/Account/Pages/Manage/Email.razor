@page "/Account/Manage/Email"
@attribute [Authorize]
@rendermode InteractiveServer
@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using WlodCar.Data

@inject UserManager<ApplicationUser>         UserManager
@inject IEmailSender<ApplicationUser>        EmailSender
@inject IdentityUserAccessor                 UserAccessor
@inject NavigationManager                    Nav

<PageTitle>Zmiana e-maila</PageTitle>

<h4 class="mb-4">Zmień adres e-mail</h4>

<StatusMessage Message="@message"/>

<div class="row">
    <div class="col-xl-6">

        <!-- formularz wysyłający link potwierdzający dla bieżącego maila -->
        <form id="send-verification-form"
              @onsubmit="OnSendEmailVerificationAsync"
              @formname="send-verification">
            <AntiforgeryToken />
        </form>

        <!-- ► formularz zmiany e-maila ◄ -->
        <EditForm Model="Input"
                  FormName="change-email"
                  OnValidSubmit="OnValidSubmitAsync">

            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />

            @if (isEmailConfirmed)
            {
                <div class="form-floating mb-3 input-group">
                    <input value="@email" id="email" class="form-control" disabled />
                    <span class="input-group-text text-success fw-bold">✓</span>
                    <label for="email">Aktualny e-mail</label>
                </div>
            }
            else
            {
                <div class="form-floating mb-3">
                    <input value="@email" id="email" class="form-control" disabled />
                    <label for="email">Aktualny e-mail</label>
                    <button type="submit"
                            class="btn btn-link p-0"
                            form="send-verification-form">
                        Wyślij link weryfikacyjny
                    </button>
                </div>
            }

            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.NewEmail"
                           id="Input.NewEmail"
                           class="form-control"
                           autocomplete="email"
                           placeholder="Nowy e-mail" />
                <label for="Input.NewEmail">Nowy e-mail</label>
                <ValidationMessage For="() => Input.NewEmail" class="text-danger" />
            </div>

            <div class="form-floating mb-4">
                <InputText @bind-Value="Input.Password"
                           id="Input.Password"
                           type="password"
                           class="form-control"
                           placeholder="Hasło" />
                <label for="Input.Password">Hasło</label>
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>

            <button class="w-100 btn btn-primary">Zmień e-mail</button>
        </EditForm>
    </div>
</div>

@code {
    /* ------------ pola prywatne ------------------------------------ */
    private string?               message;
    private ApplicationUser       user = default!;
    private string?               email;
    private bool                  isEmailConfirmed;

    [CascadingParameter]          private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm(FormName = "change-email")]
    private InputModel            Input { get; set; } = new();

    /* ------------ inicjalizacja ------------------------------------ */
    protected override async Task OnInitializedAsync()
    {
        user              = await UserAccessor.GetRequiredUserAsync(HttpContext);
        email             = await UserManager.GetEmailAsync(user);
        isEmailConfirmed  = await UserManager.IsEmailConfirmedAsync(user);
        Input.NewEmail  ??= email;
    }

    /* ------------ obsługa zmiany e-maila --------------------------- */
    private async Task OnValidSubmitAsync()
    {
        if (Input.NewEmail is null || Input.NewEmail == email)
        {
            message = "E-mail nie został zmieniony.";
            return;
        }

        /* 1. walidacja hasła ---------------------------------------- */
        if (!await UserManager.CheckPasswordAsync(user, Input.Password!))
        {
            message = "Nieprawidłowe hasło.";
            return;
        }

        /* 2. token + link ------------------------------------------ */
        var userId = await UserManager.GetUserIdAsync(user);
        var code   = await UserManager.GenerateChangeEmailTokenAsync(user, Input.NewEmail);
        code       = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));

        var callbackUrl = Nav.GetUriWithQueryParameters(
            Nav.ToAbsoluteUri("/Account/ConfirmEmailChange").AbsoluteUri,
            new Dictionary<string, object?> {
                ["userId"] = userId,
                ["email"]  = Input.NewEmail,
                ["code"]   = code
            });

        await EmailSender.SendConfirmationLinkAsync(
            user, Input.NewEmail,
            HtmlEncoder.Default.Encode(callbackUrl));

        message = "Wysłano link potwierdzający. Sprawdź skrzynkę.";
    }

    /* ------------ wysłanie linku do potwierdzenia obecnego maila --- */
    private async Task OnSendEmailVerificationAsync()
    {
        if (email is null) return;

        var userId = await UserManager.GetUserIdAsync(user);
        var code   = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code       = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));

        var callbackUrl = Nav.GetUriWithQueryParameters(
            Nav.ToAbsoluteUri("/Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code });

        await EmailSender.SendConfirmationLinkAsync(
            user, email, HtmlEncoder.Default.Encode(callbackUrl));

        message = "Wysłano mail weryfikacyjny.";
    }

    /* ------------ DTO --------------------------------------------- */
    private sealed class InputModel
    {
        [Required, EmailAddress(ErrorMessage = "Niepoprawny adres e-mail.")]
        public string? NewEmail { get; set; }

        [Required, DataType(DataType.Password)]
        public string? Password { get; set; }
    }
}